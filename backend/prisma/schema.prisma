generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  theaterAdmin
  admin
}

enum Profession {
  actor
  director
  writer
  stageDesigner
}

enum TargetAge {
  adult
  kid
  teenager
  every_age
}

enum Theme {
  default
}

model User {
  id        String    @id @default(cuid())
  lastName  String
  firstName String
  email     String    @unique
  phone     String?
  password  String
  birthDate DateTime?
  role      Role

  userSettings           UserSetting?
  theaterAdmin           TheaterAdmin?            @relation("TheaterAdmin_User")
  followedTheater        Theater[]                @relation("TheaterFollower_User")
  followedPerformance    Performance[]            @relation("PerformanceFollower_User")
  UserSeasonTicket       UserSeasonTicket[]
  UserVisitedPerformance UserVisitedPerformance[]
}

model UserSetting {
  id     String @id @default(cuid())
  userId String @unique

  theme Theme
  user  User  @relation(fields: [userId], references: [id])
}

model Genre {
  id   String @id @default(cuid())
  name String

  perfomances Performance[] @relation("Performance_Genre")
}

model UserVisitedPerformance {
  id             String @id @default(cuid())
  qrImage        String
  userId         String
  performanceId  String
  seasonTicketId String
  seats          Int

  seasonTicket SeasonTicket @relation(fields: [seasonTicketId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  performance  Performance  @relation(fields: [performanceId], references: [id])
}

model Performance {
  id                      String                   @id @default(cuid())
  title                   String
  theaterId               String
  posterURL               String?
  imagesURL               String[]                 @default([])
  description             String
  targetAudience          TargetAge?
   futurePerformance       FuturePerformances?
  premierePerfomanceEvent PerformanceEvents?       @relation("premiere", fields: [performanceEventId], references: [id])
  performanceEvents       PerformanceEvents[]
  UserVisitedPerformance  UserVisitedPerformance[]
  performanceFollowers    User[]                   @relation("PerformanceFollower_User")
  genre                   Genre[]                  @relation("Performance_Genre")
}

model PerformanceEvents {
  id              String       @id @default(cuid())
  spots           Int
  soldSpots       Int          @default(0)
  performanceId   String
  premiere        Performance? @relation("premiere")
  performance     Performance  @relation(fields: [performanceId], references: [id])
}

model FuturePerformances {
  id                String      @id @default(cuid())
  targetBudgetIdeal Int
  targetBudget      Int
  minimumBudget     Int
  actualBudget      Int
  gift              String
  performanceId     String      @unique
  performance       Performance @relation(fields: [performanceId], references: [id])
}

model Company {
  id   String @id @default(cuid())
  name String

  creators Creator[] @relation("Company_Creator")
}

model Creator {
  id            String  @id @default(cuid())
  name          String
  imageURL      String?
  profession    Profession[]
  awards        String?
  introductions String?

  performances Performance[] @relation("Performance_Creator")
  company      Company[]     @relation("Company_Creator")
}

model Theater {
  id             String  @id @default(cuid())
  name           String
  address        String
  email          String
  imageURL       String?
  phone          String?
  seatsAvailable Int?

  performances Performance[]
  admins       TheaterAdmin[] @relation("TheaterAdmin_Theater")
  followers    User[]         @relation("TheaterFollower_User")
  // campaigns    String/Campaigns[]  EZ LEKÉRDEWZHETŐ   --- ez még nagyon a jövő zenéje, de lehetne majd csinálni egy kapcsoló táblát, ami összeköti az adott színházat a különböző típusú adománygyűjtő kampánnyal, addig meg csak egy url, vag egy leírás lehet itt, de ez nagyon jövő zene 
}

model TheaterAdmin {
  userId    String  @id
  theaterId String
  theater   Theater @relation("TheaterAdmin_Theater", fields: [theaterId], references: [id])
  user      User    @relation("TheaterAdmin_User", fields: [userId], references: [id])
}

model SeasonTicket {
  id                     String                   @id @default(cuid())
  name                   String
  price                  Int
  durationDay            Int
  seatQuantity           Int
  UserSeasonTicket       UserSeasonTicket[]
  UserVisitedPerformance UserVisitedPerformance[]
}

model UserSeasonTicket {
  id             String       @id
  userId         String
  seasonTicketId String
  created        DateTime     @default(now())
  SeasonTicket   SeasonTicket @relation(fields: [seasonTicketId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}








