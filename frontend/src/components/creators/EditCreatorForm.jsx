import { Formik, Form, Field, ErrorMessage } from 'formik';
import { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import * as Yup from 'yup';

import DeleteCreatorModal from './DeleteCreatorModal';
import AuthContext from '../../contexts/AuthContext';
import creatorsService from '../../services/creators.service';
import DefaultButton from '../misc/DefaultButton';

const PROFESSIONS = ['actor', 'director', 'writer', 'stageDesigner']; // Enum Ã©rtÃ©kek

export default function EditCreatorForm({ creator }) {
  const navigate = useNavigate();
  const { user } = useContext(AuthContext); // ğŸ”¹ Most mÃ¡r valÃ³ban hasznÃ¡ljuk a useContext-et
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [preview, setPreview] = useState(creator.imageURL || ''); // KÃ©p elÅ‘nÃ©zet
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false); // Modal Ã¡llapot

  // ğŸ“Œ ValidÃ¡ciÃ³s sÃ©ma
  const validationSchema = Yup.object({
    name: Yup.string().required('NÃ©v megadÃ¡sa kÃ¶telezÅ‘'),
    profession: Yup.array().min(1, 'LegalÃ¡bb egy foglalkozÃ¡st ki kell vÃ¡lasztani').of(Yup.string()),
    awards: Yup.string(),
    introductions: Yup.string(),
    image: Yup.mixed(),
  });

  // ğŸ“Œ Form elkÃ¼ldÃ©se
  const handleSubmit = async (values) => {
    setIsSubmitting(true);

    try {
      const formData = new FormData();
      formData.append('name', values.name);
      formData.append('awards', values.awards);
      formData.append('introductions', values.introductions);

      // ğŸ”¹ A profession tÃ¶mbkÃ©nt kell maradjon, NEM STRING
      values.profession.forEach((prof) => formData.append('profession', prof));

      // ğŸ“Œ Ha van feltÃ¶ltÃ¶tt fÃ¡jl, hozzÃ¡adjuk a formData-hoz
      if (values.image instanceof File) {
        formData.append('image', values.image);
      }

      await creatorsService.update(creator.id, formData);

      toast.success('AlkotÃ³ sikeresen frissÃ­tve!');
      setTimeout(() => navigate(-1), 1500); // ğŸ”¹ 1,5 mp mÃºlva visszalÃ©p az elÅ‘zÅ‘ oldalra
    } catch (err) {
      toast.error('Hiba tÃ¶rtÃ©nt a frissÃ­tÃ©s sorÃ¡n.');
    } finally {
      setIsSubmitting(false);
    }
  };

  // ğŸ“Œ AlkotÃ³ tÃ¶rlÃ©se
  const handleDelete = async () => {
    try {
      await creatorsService.deleteCreator(creator.id);
      toast.success(`"${creator.name}" sikeresen tÃ¶rÃ¶lve.`);
      navigate('/creators'); // ğŸ”¹ TÃ¶rlÃ©s utÃ¡n visszanavigÃ¡lÃ¡s
    } catch (error) {
      toast.error('Hiba tÃ¶rtÃ©nt az alkotÃ³ tÃ¶rlÃ©se sorÃ¡n.');
    } finally {
      setIsDeleteModalOpen(false); // Modal bezÃ¡rÃ¡sa
    }
  };

  return (
    <div className="mx-auto p-12 my-40 bg-c-secondary-light rounded-md">
      <h2 className="font-bold text-gray-800 text-xl mb-6 text-center">AlkotÃ³ mÃ³dosÃ­tÃ¡sa</h2>

      <Formik
        initialValues={{
          name: creator.name || '',
          profession: creator.profession || [],
          awards: creator.awards || '',
          introductions: creator.introductions || '',
          image: null, // AlapÃ©rtelmezÃ©s szerint nincs fÃ¡jl
        }}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, setFieldValue }) => (
          <Form>
            {/* ğŸ“Œ NÃ©v */}
            <div className="mb-4">
              <label htmlFor="name" className="text-gray-800 font-bold">
                NÃ©v <span className="text-red-500">*</span>
              </label>
              <Field
                type="text"
                name="name"
                placeholder="Add meg az alkotÃ³ nevÃ©t"
                className="w-full border p-2 rounded my-1 text-gray-800"
              />
              <ErrorMessage name="name" component="div" className="text-red-500 text-sm" />
            </div>

            {/* ğŸ“Œ FoglalkozÃ¡s vÃ¡lasztÃ³ */}
            <div className="mb-4">
              <label htmlFor="profession" className="text-gray-800 font-bold">
                FoglalkozÃ¡s <span className="text-red-500">*</span>
              </label>
              <div className="flex flex-wrap gap-2">
                {PROFESSIONS.map((profession) => (
                  <label
                    key={profession}
                    className={`cursor-pointer px-3 py-1 rounded-md border ${
                      values.profession.includes(profession)
                        ? 'bg-blue-500 text-white border-blue-700'
                        : 'bg-gray-200 text-gray-800 border-gray-400'
                    }`}
                  >
                    <input
                      type="checkbox"
                      value={profession}
                      className="hidden"
                      checked={values.profession.includes(profession)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setFieldValue('profession', [...values.profession, profession]);
                        } else {
                          setFieldValue(
                            'profession',
                            values.profession.filter((p) => p !== profession),
                          );
                        }
                      }}
                    />
                    {profession}
                  </label>
                ))}
              </div>
              <ErrorMessage name="profession" component="div" className="text-red-500 text-sm" />
            </div>

            {/* ğŸ“Œ DÃ­jak */}
            <div className="mb-4">
              <label htmlFor="awards" className="text-gray-800 font-bold">
                DÃ­jak
              </label>
              <Field
                type="text"
                name="awards"
                placeholder="DÃ­jak, kitÃ¼ntetÃ©sek"
                className="w-full border p-2 rounded my-1 text-gray-800"
              />
            </div>

            {/* ğŸ“Œ BemutatkozÃ¡s */}
            <div className="mb-4">
              <label htmlFor="introductions" className="text-gray-800 font-bold">
                BemutatkozÃ¡s
              </label>
              <Field
                as="textarea"
                name="introductions"
                placeholder="BemutatkozÃ¡s az alkotÃ³rÃ³l"
                className="w-full border p-2 rounded my-1 text-gray-800"
              />
            </div>

            {/* ğŸ“Œ KÃ©p feltÃ¶ltÃ©s */}
            <div className="mb-4">
              <label htmlFor="image" className="text-gray-800 font-bold block mb-2">
                KÃ©p feltÃ¶ltÃ©se
              </label>
              <DefaultButton
                text="KÃ©p kivÃ¡lasztÃ¡sa"
                type="button"
                onClick={() => document.getElementById('image').click()}
              />
              <input
                type="file"
                id="image"
                accept="image/*"
                onChange={(event) => {
                  const file = event.currentTarget.files[0];
                  setFieldValue('image', file);
                  setPreview(URL.createObjectURL(file)); // ğŸ”¹ ElÅ‘nÃ©zet frissÃ­tÃ©se
                }}
                className="hidden"
              />

              {/* KÃ©p elÅ‘nÃ©zet */}
              {preview && (
                <div className="my-2 relative">
                  <img
                    src={preview}
                    alt="KÃ©p elÅ‘nÃ©zet"
                    className="w-24 h-24 object-cover rounded"
                  />
                  <button
                    type="button"
                    onClick={() => {
                      setFieldValue('image', null);
                      setPreview(null);
                    }}
                    className="absolute top-0 right-0 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm"
                  >
                    &times;
                  </button>
                </div>
              )}
              <ErrorMessage name="image" component="div" className="text-red-500 text-sm" />
            </div>

            {/* ğŸ“Œ Gombok */}
            <div className="flex justify-between gap-10">
              <DefaultButton text="MentÃ©s" type="submit" disabled={isSubmitting} />
              <DefaultButton text="MÃ©gsem" type="button" onClick={() => navigate(-1)} />
            </div>

            {/* ğŸ“Œ Admin szÃ¡mÃ¡ra tÃ¶rlÃ©s gomb */}
            {user &&
              user.role === 'admin' && ( // ğŸ”¹ Itt hasznÃ¡lom a useContext-bÅ‘l kapott user vÃ¡ltozÃ³t!
                <div className="mt-6 flex justify-center">
                  <button
                    type="button"
                    className="bg-red-600 text-white px-4 py-3 rounded font-bold hover:bg-red-500 transition duration-150"
                    onClick={() => setIsDeleteModalOpen(true)}
                  >
                    AlkotÃ³ tÃ¶rlÃ©se
                  </button>
                </div>
              )}
          </Form>
        )}
      </Formik>
      {/* ğŸ“Œ TÃ¶rlÃ©si modal */}
      <DeleteCreatorModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        onDelete={handleDelete}
        title={creator.name}
      />
    </div>
  );
}
